#!/usr/bin/env python

# Copyright (c) 2017, Electric Movement
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of the FreeBSD Project

# Author: Brandon Kinman

import cv2
import base64
import numpy as np

from io import BytesIO
from PIL import Image
from socketIO_client import SocketIO, LoggingNamespace

def on_sensor_data(data):
    rgb_image = Image.open(BytesIO(base64.b64decode(data['rgb_image']))).convert('RGB')
    rgb_image = np.asarray(rgb_image)
    cv2.imshow('rgb_image',rgb_image[:, :, ::-1].copy())
    cv2.waitKey(1)

    # result = visualization.overlay_predictions(rgb_image, pred, None, 0.5, 1)
    # result = result.convert('RGB')
    # result = np.asarray(result)
    # cv2.imshow('result',result[:, :, ::-1].copy())
    # cv2.waitKey(1)

if __name__ == '__main__':
    socketIO = SocketIO('localhost', 4567, LoggingNamespace)
    socketIO.on('sensor_data', on_sensor_data)

    socketIO.wait(100000)

    cv2.destroyAllWindows()
